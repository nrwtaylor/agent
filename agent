#!/usr/bin/env php
<?php

//require __DIR__.'/vendor/autoload.php';
require '/var/www/stackr.test/vendor/autoload.php';

use Nrwtaylor\StackAgentThing;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

(new Application('Agent', '0.0.6'))
    ->register('agent')

    ->addArgument('message', InputArgument::IS_ARRAY, 'Datagram message')
    ->addOption(
        'channel',
        null,
        InputOption::VALUE_REQUIRED,
        'Which channel response should be used?',
        false
    )
    ->addOption(
        'handler',
        null,
        InputOption::VALUE_REQUIRED,
        'Which short message handler should be used?',
        false
    )
    ->addOption(
        'meta',
        null,
        InputOption::VALUE_REQUIRED,
        'What meta information should be shown?',
        false
    )
    ->addOption(
        'from',
        null,
        InputOption::VALUE_REQUIRED,
        'What from address should be used?',
        false
    )

    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $default_handler = "php";
        $default_channel = "sms";
        $default_meta = "stack";
        $default_from = 'default_console_user';

        $message = $input->getArgument('message');

        $message = implode(" ", $message);

        $thing = new \Nrwtaylor\StackAgentThing\Thing(null);

        $uuid = $thing->getUuid();

        // TODO Command line option
        $test_new_user = false;
        if ($test_new_user) {
            $id = "console_" . $uuid;
        }
        $to = 'agent';

        $meta = strtolower($input->getOption('meta'));

        if ($meta == false) {
            $from = $default_from;
        }

        $from = strtolower($input->getOption('from'));

        if ($from == false) {
            $from = $default_meta;
        }

        $id = $from;





        if ($thing->thing != false) {
            $f = trim(str_replace($uuid, "", $input));
            if ($f == "" or $f == 'agent') {
                $agent = new Uuid($thing, $f);
                $this->thing_report = $agent->thing_report;
                return;
            }
            $agent = new Agent($thing, $f);
            $this->thing_report = $agent->thing_report;
            return;
        }

        $thing->Create($id, $to, $message);

        // Tag as console input
        $console = new \Nrwtaylor\StackAgentThing\Channel($thing, "console");

        // Get the handler which takes the short message.
        // e.g. Gearman, direct PHP call, Apache request ...
        $handler = strtolower($input->getOption('handler'));

        switch ($handler) {
            case 'gearman':
                // Build, send and receive the Gearman datagram.
                $arr = json_encode([
                    "to" => $id,
                    "from" => "agent",
                    "subject" => $message,
                ]);
                $client = new \GearmanClient();
                $client->addServer();
                $thing_string = $client->doNormal("call_agent", $arr);

                // To reduce load Gearman can handle calls in the background.
                // $client->doHighBackground("call_agent", $arr);

                if ($thing_string == "") {
                    // TODO: Handle null strings from Gearman.
                    // For now echo to console.
                    echo "Null string returned from GEARMAN\n";
                }

                $thing_report = json_decode($thing_string, true);
                break;
            default:
                // Default console handler is SMS.
                $handler = $default_handler;
                $agent = new \Nrwtaylor\StackAgentThing\Agent($thing);

                $thing_report = $agent->thing_report;
        }

        // See handling command line options.
        // https://symfony.com/doc/current/console/input.html
        $channel = $input->getOption('channel');

        if ($channel == false) {
            $channel = $default_channel;
        }

        $text_response = "No text response.";
        if (isset($thing_report[$channel])) {
            $text_response = $thing_report[$channel];
        }

        $response = "";
        $response .= $text_response;

        $meta = strtolower($input->getOption('meta'));

        if ($meta == false) {
            $meta = $default_meta;
        }

        if (($meta == 'stack') or ($meta == 'on')) {
        

        $agentclock = new \Nrwtaylor\StackAgentThing\Clocktime(
            $thing,
            "clocktime"
        );

        $response .= "\n";
        $response .=
            strtoupper($handler) .
            " " .
            number_format($thing->elapsed_runtime()) .
            "ms";
        $agentclock->makeClocktime();
        $response .= "\n" . $agentclock->clock_time . " " . $thing->nuuid;
        }

        return $output->writeln("<info>$response</info>");
    })
    ->getApplication()
    ->setDefaultCommand('agent', true) // Single command application
    ->run();

