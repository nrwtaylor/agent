#!/usr/bin/env php
<?php
//require __DIR__.'/vendor/autoload.php';
require "/var/www/stackr.test/vendor/autoload.php";

use Nrwtaylor\StackAgentThing;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

// Added persistent user level memory. Until power off.

(new Application("Agent", "0.1.6"))
    ->register("agent")

    ->addArgument("message", InputArgument::IS_ARRAY, "Datagram message")
    ->addOption(
        "channel",
        null,
        InputOption::VALUE_REQUIRED,
        "Which channel response should be used?",
        false
    )
    ->addOption(
        "handler",
        null,
        InputOption::VALUE_REQUIRED,
        "Which short message handler should be used?",
        false
    )
    ->addOption(
        "meta",
        null,
        InputOption::VALUE_REQUIRED,
        "What meta information should be shown?",
        false
    )
    ->addOption(
        "from",
        null,
        InputOption::VALUE_REQUIRED,
        "What from address should be used?",
        false
    )
    ->addOption(
        "log",
        null,
        InputOption::VALUE_REQUIRED,
        "What logging should be displayed?",
        false
    )
    ->addOption(
        "watch",
        null,
        InputOption::VALUE_REQUIRED,
        'What to watch for ie --watch="+warning"',
        false
    )

    ->addOption(
        "regex",
        null,
        InputOption::VALUE_REQUIRED,
        'Watch for a regex-based match ie --regex="/warning/"',
        false
    )

    ->addOption(
        "flag-error",
        null,
        InputOption::VALUE_NONE,
        "Trigger error code response. Use with --watch and --regex"
    )
    ->addOption(
        "show-channels",
        null,
        InputOption::VALUE_NONE,
        "Show the available response channels."
    )
    ->addOption(
        "show-urls",
        null,
        InputOption::VALUE_NONE,
        "Show the available response channels."
    )

    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $error_code = 0;

        $flag_match = 1; // Match not found.

        $default_handler = "php";
        $default_channel = "sms";
        $default_meta = "stack";
        $default_from = "default_console_user";
        $default_log = "off";
        $default_watch = false;
        $default_regex = false;
        $default_channels = "off";
        $default_error = "off";

        $log = $input->getOption("log");

        if ($log == false) {
            $log = $default_log;
        }

        $watch = $input->getOption("watch");

        if ($watch == false) {
            $watch = $default_watch;
        }

        $message = $input->getArgument("message");

        $message = implode(" ", $message);

        $thing = new \Nrwtaylor\StackAgentThing\Thing(null);

        // Handle stream as agent_input?

        $agent_input = null;

        $readStreams = [STDIN];
        $writeStreams = [];
        $exceptStreams = [];
        $streamCount = stream_select(
            $readStreams,
            $writeStreams,
            $exceptStreams,
            0
        );

        $hasStdIn = $streamCount === 1;

        if ($hasStdIn) {
            $f = fopen("php://stdin", "r");
            $agent_input = "";
            while ($line = fgets($f)) {
                $agent_input .= $line;
            }
            fclose($f);
            // Read content from STDIN ...
        }

        $uuid = $thing->getUuid();

        // TODO Command line option
        $test_new_user = false;
        if ($test_new_user) {
            $id = "console_" . $uuid;
        }
        $to = "agent";

        $regex_handler = new \Nrwtaylor\StackAgentThing\Regex($thing, "regex");

        $regex = $input->getOption("regex");
        $regex_error = "";
        if ($regex == false) {
            $regex = $default_regex;

            // If the watch string looks like regex and regex isn't set
            // Set regex to watch string

            if ($regex_handler->validateRegex($watch) == true) {
                //  if (($watch !== false) and ($watch[0] == $watch[strlen($watch) - 1])) {
                $regex = $watch;
            }
        }

        // Check if regex string has delimiters
        // Otherwise ignore it.
        if ($regex_handler->validateRegex($regex) == true) {
            //        if ($regex === false or $regex[0] == $regex[strlen($regex) - 1]) {
        } else {
            $regex_error = "REGEX INVALID";
            $regex = false;
        }


        $meta = strtolower($input->getOption("meta"));

        if ($meta == false) {
            $from = $default_from;
        }

        $from = strtolower($input->getOption("from"));

        if ($from == false) {
            $from = $default_meta;
        }

        $id = $from;

        if ($thing->thing != false) {
            $f = trim(str_replace($uuid, "", $input));
            if ($f == "" or $f == "agent") {
                $agent = new Uuid($thing, $f);
                $this->thing_report = $agent->thing_report;
                return;
            }
            $agent = new Agent($thing, $f);

            $this->thing_report = $agent->thing_report;
            return;
        }

        $thing->Create($id, $to, $message, $agent_input);

        // Tag as console input
        $console = new \Nrwtaylor\StackAgentThing\Channel($thing, "console");

        // Get the handler which takes the short message.
        // e.g. Gearman, direct PHP call, Apache request ...

        $handler = strtolower($input->getOption("handler"));

        switch ($handler) {
            case "gearman":
                // Build, send and receive the Gearman datagram.
                $arr = json_encode([
                    "to" => $id,
                    "from" => "agent",
                    "subject" => $message,
                    "agent_input" => $agent_input,
                ]);
                $client = new \GearmanClient();
                $client->addServer();
                $thing_string = $client->doNormal("call_agent", $arr);

                // To reduce load Gearman can handle calls in the background.
                // $client->doHighBackground("call_agent", $arr);

                if ($thing_string == "") {
                    // TODO: Handle null strings from Gearman.
                    // For now echo to console.
                    echo "Null string returned from GEARMAN\n";
                }

                $thing_report = json_decode($thing_string, true);
                break;
            default:
                // Default console handler is SMS.
                $handler = $default_handler;
                $agent = new \Nrwtaylor\StackAgentThing\Agent(
                    $thing,
                    $agent_input
                );

                $thing_report = $agent->thing_report;
        }

        $response = "";

        $response .= responseLog($log, $thing, $thing_report);

        // See handling command line options.
        // https://symfony.com/doc/current/console/input.html
        $channel = $input->getOption("channel");

        if ($channel == false) {
            $channel = $default_channel;
        }

        $text_response = "No text response.";
        if (isset($thing_report[$channel])) {
            $text_response = $thing_report[$channel];

            if ($channel == "log") {
                $text_response = preg_replace(
                    "#<br\s*/?>#i",
                    "\n",
                    $text_response
                );
            }
        }

        $response .= $text_response;

        $channels = strtolower($input->getOption("show-channels"));

        if ($channels == true) {
            $channels_text = "";
            foreach ($thing_report as $channel => $value) {
                $channels_text .= $channel . " ";
            }
            $response .= "\n" . trim($channels_text);
        }

        $urls = strtolower($input->getOption("show-urls"));
        $urls_text = "";
        if ($urls == true) {
            if (isset($agent->link)) {
                $urls_text .= $agent->link . "\n";
            }
            if (isset($agent->url)) {
                $urls_text .= $agent->url . "\n";
            }
            if (isset($agent->urls)) {
                $urls_text .= implode("\n", $agent->urls) . "\n";
            }
            $response .= "\n" . trim($urls_text);
        }

            $text_handler = new \Nrwtaylor\StackAgentThing\Text(
                $thing,
                "text"
            );

        $query_handler = new \Nrwtaylor\StackAgentThing\Query($thing, "query");

        if ($watch !== false) {
            [$log_includes, $log_excludes] = $query_handler->parseQuery($watch);

            $watch_flag = $text_handler->filterText(
                $text_response,
                $log_includes,
                $log_excludes
            );
            if ($watch_flag !== true) {
                //$error_code = 1;
                $flag_match = 0; // Found a match
            }
        }

        if ($regex !== false) {
            $pattern = $regex;
            $regex_flag = preg_match($pattern, $text_response);
            if ($regex_flag === 0) {
                $regex_flag = true;
            } else {
                $regex_flag = false;
            }
            if ($regex_flag !== true) {
                //$error_code = 1;
                $flag_match = 0; // Found a match.
            }
        }

        /*
Claws options to test:  "0 (passed)", "non-0 (failed)"
So in this content. "Failed to find a match" is 1.
*/

        $meta = strtolower($input->getOption("meta"));

        if ($meta == false) {
            $meta = $default_meta;
        }

        if ($meta == "stack" or $meta == "on") {
            $meta_response = "";
            $agentclock = new \Nrwtaylor\StackAgentThing\Clocktime(
                $thing,
                "clocktime"
            );

            $meta_response .=
                strtoupper($handler) .
                " " .
                number_format($thing->elapsed_runtime()) .
                "ms";
            $agentclock->makeClocktime();
            $meta_response .=
                "\n" . $agentclock->clock_time . " " . $thing->nuuid;

            $prior = new \Nrwtaylor\StackAgentThing\Prior($thing, "prior");
            $meta_response .= " " . substr($prior->prior_uuid, 0, 4);


            if (isset($watch_flag) and $watch_flag !== true) {
                $meta_response .= " WATCH FLAG";
            }

            if (
                (isset($regex_flag) or isset($watch_flag)) and
                $regex_flag !== true
            ) {
                $meta_response .= $regex_error == "" ? "" : " " . $regex_error;
            }
            if (isset($regex_flag) and $regex_flag !== true) {
                $meta_response .= " REGEX FLAG";
            }

            // Determine responsiveness.
            // Did the stack provide a thing, a thing and a response ...
            // Did the stack respond?
            $stack_text = "No stack response.";
            if (isset($thing_report)) {
                if ($prior->prior_uuid == false) {
                    $stack_text = "Persistent stack not found.";
                } else {
                    $stack_text = "Memory available.";
                }
                if (
                    isset($thing_report["thing"]) and
                    $thing_report["thing"] == false
                ) {
                    $stack_text = "No thing provided in response.";
                }

                if (isset($thing_report["thing"]->from)) {
                    $stack_text = "Added to stack.";

                    if ($thing_report["thing"]->from == null) {
                        $stack_text = "Null stack.";
                    }
                }
            }

            $meta_response .= " " . $stack_text;
        }

        $output->writeln("<info>$response</info>");
        $output->writeln("<comment>$meta_response</comment>");

        // If error flagging is on, then return the generated error code.
        // Claws uses this with a test filter
        // And it is a common way of returning a signal from a
        // shell or perl script.

        // Use --flag-error to request this.

        $flag_error = strtolower($input->getOption("flag-error"));
        if ($flag_error == true) {
            return $flag_match; //0 --- match found, 1 --- failed to find match
            //return $error_code;
        }

        return 0;
    })
    ->getApplication()
    ->setDefaultCommand("agent", true) // Single command application
    ->run();

/*

Custom log response for command line agent.

*/

function responseLog($log, $thing, $thing_report)
{
    if ($log != "off" and isset($thing_report["log"])) {
        $log_response = ""; // Assume no log wanted
        $log_handler = new Nrwtaylor\StackAgentThing\Makelog(
            $thing,
            $thing_report
        );
        $log_response .= $log_handler->thing_report["log"] . "\n\n";
        $log_response .= "Self-report [Filtered]\n\n";
        $query_handler = new \Nrwtaylor\StackAgentThing\Query($thing, "query");
        [$log_includes, $log_excludes] = $query_handler->parseQuery($log);

        if (strtolower($log) == "on") {
            $log_excludes = [
                "\"Thing\"",
                "\"Agent\"",
                "\"Variables\"",
                "[DEBUG]",
                "[OPTIMIZE]",
            ];
        } // default set of excludes

        if (strtolower($log) == "all") {
            $log_excludes = [];
        }

        if (strtolower($log) == "optimize") {
            $log_includes = ["+[OPTIMIZE]"];
        }
        if (strtolower($log) == "debug") {
            $log_includes = ["+[DEBUG]"];
        }
        if (strtolower($log) == "information") {
            $log_includes = ["+[INFORMATION]"];
        }
        if (strtolower($log) == "fatal") {
            $log_includes = ["+[FATAL]"];
        }
        if (strtolower($log) == "warning") {
            $log_includes = ["+[WARNING]"];
        }

        $log_text = $thing_report["log"];

        $text_handler = new \Nrwtaylor\StackAgentThing\Text($thing, "text");

        $log_response .= $text_handler->filterText($log_text, $log_includes, $log_excludes);

        //$response .= $log_response . "\n";
        return $log_response;
    }
    return "";
}

/*

Read a string to determine what to include or exclude.

*/

